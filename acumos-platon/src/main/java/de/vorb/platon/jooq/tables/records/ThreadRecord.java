/*
 * This file is generated by jOOQ.
*/
package de.vorb.platon.jooq.tables.records;


import de.vorb.platon.jooq.tables.Thread;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ThreadRecord extends UpdatableRecordImpl<ThreadRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 921769548;

    /**
     * Setter for <code>ACUMOS_COMMENT.THREAD.ID</code>.
     */
    public ThreadRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ACUMOS_COMMENT.THREAD.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>ACUMOS_COMMENT.THREAD.URL</code>.
     */
    public ThreadRecord setUrl(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ACUMOS_COMMENT.THREAD.URL</code>.
     */
    @NotNull
    @Size(max = 256)
    public String getUrl() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ACUMOS_COMMENT.THREAD.TITLE</code>.
     */
    public ThreadRecord setTitle(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ACUMOS_COMMENT.THREAD.TITLE</code>.
     */
    @Size(max = 512)
    public String getTitle() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return Thread.THREAD.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Thread.THREAD.URL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Thread.THREAD.TITLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getUrl();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getTitle();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ThreadRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ThreadRecord value2(String value) {
        setUrl(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ThreadRecord value3(String value) {
        setTitle(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ThreadRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ThreadRecord
     */
    public ThreadRecord() {
        super(Thread.THREAD);
    }

    /**
     * Create a detached, initialised ThreadRecord
     */
    public ThreadRecord(Long id, String url, String title) {
        super(Thread.THREAD);

        set(0, id);
        set(1, url);
        set(2, title);
    }
}
