/*
 * This file is generated by jOOQ.
*/
package de.vorb.platon.jooq.tables;


import de.vorb.platon.jooq.AcumosComment;
import de.vorb.platon.jooq.Keys;
import de.vorb.platon.jooq.tables.records.ThreadRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Thread extends TableImpl<ThreadRecord> {

    private static final long serialVersionUID = 1649933853;

    /**
     * The reference instance of <code>ACUMOS_COMMENT.THREAD</code>
     */
    public static final Thread THREAD = new Thread();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ThreadRecord> getRecordType() {
        return ThreadRecord.class;
    }

    /**
     * The column <code>ACUMOS_COMMENT.THREAD.ID</code>.
     */
    public final TableField<ThreadRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR ACUMOS_COMMENT.SYSTEM_SEQUENCE_535E8D49_CA03_4917_AEF5_D70F272F112E)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>ACUMOS_COMMENT.THREAD.URL</code>.
     */
    public final TableField<ThreadRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "");

    /**
     * The column <code>ACUMOS_COMMENT.THREAD.TITLE</code>.
     */
    public final TableField<ThreadRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR.length(512), this, "");

    /**
     * Create a <code>ACUMOS_COMMENT.THREAD</code> table reference
     */
    public Thread() {
        this("THREAD", null);
    }

    /**
     * Create an aliased <code>ACUMOS_COMMENT.THREAD</code> table reference
     */
    public Thread(String alias) {
        this(alias, THREAD);
    }

    private Thread(String alias, Table<ThreadRecord> aliased) {
        this(alias, aliased, null);
    }

    private Thread(String alias, Table<ThreadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return AcumosComment.ACUMOS_COMMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ThreadRecord, Long> getIdentity() {
        return Keys.IDENTITY_THREAD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ThreadRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ThreadRecord>> getKeys() {
        return Arrays.<UniqueKey<ThreadRecord>>asList(Keys.CONSTRAINT_D);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Thread as(String alias) {
        return new Thread(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Thread rename(String name) {
        return new Thread(name, null);
    }
}
