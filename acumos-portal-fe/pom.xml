<!--  
===============LICENSE_START=======================================================
Acumos  Apache-2.0
===================================================================================
Copyright (C) 2017 AT&T Intellectual Property & Tech Mahindra. All rights reserved.
===================================================================================
This Acumos software file is distributed by AT&T and Tech Mahindra
under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
     http://www.apache.org/licenses/LICENSE-2.0
 
This file is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
===============LICENSE_END=========================================================
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.acumos.portal-marketplace</groupId>
	<artifactId>acumos-portal-fe</artifactId>
	<version>1.15.45-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>Acumos Portal frontend server</name>
	<description>Acumos Portal AngularJS Front End</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.4.RELEASE</version>
		<!-- silence warning about parent relative path -->
		<relativePath />
	</parent>
 
	<properties>
		<encoding>UTF-8</encoding>
		<!-- Stand-alone RESTFul application -->
		<start-class>org.acumos.portal.fe.AcumosPortalApplication</start-class>
		<!-- Jenkins invokes mvn with argument -Dbuild.number=${BUILD_NUMBER} -->
		<build.number>0</build.number>
		<eelf.version>1.0.0</eelf.version>
		<!-- tests require database to be running -->
		<skipTests>false</skipTests>
		<!-- LF Docker coordinates; pull is a proxy for external -->
		<docker.pull.registry>nexus3.acumos.org:10001</docker.pull.registry>
		<!-- Supplied by Jenkins -->
		<docker.push.registry>${env.NEXUS3_PUSH_REGISTRY}</docker.push.registry>
		<sonar.exclusions>**/scripts/**/*,**.js</sonar.exclusions>
	</properties>
	<!-- All dependencies are public, no extra repositories needed. -->
	<dependencies>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<!-- Spring chooses <version>${slf4j.version}</version> -->
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<!-- Spring chooses <version>${logback.version}</version> -->
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<!-- Spring chooses <version>${logback.version}</version> -->
		</dependency>
		<dependency>
			<groupId>com.att.eelf</groupId>
			<artifactId>eelf-core</artifactId>
			<version>${eelf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<!-- spring sets the version -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!-- spring sets the version -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<!-- spring sets the version -->
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zuul</artifactId>
			<version>1.3.1.RELEASE</version>
		</dependency>
			<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<!-- Spring sets the <version>4.11</version> -->
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<!-- Require Java 1.8 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<!-- Skip the deployment step, this makes jenkins config easy -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<version>2.5.2</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.8.2</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<warSourceDirectory>src/main/webapp/</warSourceDirectory>
					<archive>
						<manifestEntries>
							<Build-Number>${project.version}.${build.number}</Build-Number>
							<Build-Time>${maven.build.timestamp}</Build-Time>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<executable>true</executable>
					<fork>true</fork>
					<addResources>true</addResources>
					<goals>
						<goal>repackage</goal>
					</goals>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>1.14</version>
				<configuration>
					<licenseName>acumos</licenseName>
					<licenseResolver>${project.baseUri}/src/license</licenseResolver>
					<addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
					<processStartTag>===============LICENSE_START=======================================================</processStartTag>
					<processEndTag>===============LICENSE_END=========================================================</processEndTag>
					<sectionDelimiter>===================================================================================</sectionDelimiter>
					<inceptionYear>2017</inceptionYear>
					<organizationName><![CDATA[AT&T Intellectual Property & Tech Mahindra. All rights reserved.]]></organizationName>
					<projectName>Acumos</projectName>
					<canUpdateCopyright>true</canUpdateCopyright>
					<canUpdateDescription>true</canUpdateDescription>
					<canUpdateLicense>true</canUpdateLicense>
					<emptyLineAfterHeader>true</emptyLineAfterHeader>
					<includes>
						<include>**/*.java</include>
						<!-- <include>**/*.js</include> -->
						<!-- <include>**/*.ts</include> -->
					</includes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.6.201602180812</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.21.0</version>
				<configuration>
					<verbose>true</verbose>
					<!-- docker runs on the LF build minion so the default value is ok -->
					<!-- LF <dockerHost>unix:///var/run/docker.sock</dockerHost> LF -->
					<pullRegistry>${docker.pull.registry}</pullRegistry>
					<pushRegistry>${docker.push.registry}</pushRegistry>
					<!-- LF credentials are not supplied here -->
					<images>
						<image>
							<!-- Specify a tag to avoid default tag "latest" -->
							<name>acumos-portal-fe:${project.version}</name>
							<build>
								<!-- This is the same FROM used in a Dockerfile -->
								<from>frolvlad/alpine-oraclejdk8:slim</from>
								<tags>
									<!-- Add tag with build number -->
									<tag>${project.version}-b${build.number}</tag>
								</tags>
								<assembly>
									<inline>
										<files>
											<file>
												<source>application.yml.template</source>
												<outputDirectory />
												<destName>application.yml</destName>
											</file>
											<file>
												<source>target/${project.artifactId}-${project.version}.${project.packaging}</source>
												<outputDirectory />
											</file>
										</files>
									</inline>
								</assembly>
								<cmd>
									<!-- CDATA prevents Eclipse formatter from breaking line -->
									<shell><![CDATA[cd /maven; java -Xms512m -Xmx1024m -Djava.security.egd=file:/dev/./urandom -jar ${project.artifactId}-${project.version}.${project.packaging}]]></shell>
								</cmd>
							</build>
						</image>
					</images>
				</configuration>
				<!-- build Docker images in install phase, push in deploy phase -->
				<executions>
					<execution>
						<goals>
							<goal>build</goal>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<!-- No distributionManagement section, jars are not deployed -->
</project>
